I"<h1 id="git-使用操作">Git 使用操作</h1>
<h6 id="tags-skill">tags: <code class="language-plaintext highlighter-rouge">skill</code></h6>

<p>https://backlog.com/git-tutorial/tw/reference/ssh.html
基本概念:
如何寫一個好的git commit message
https://blog.louie.lu/2017/03/21/%E5%A6%82%E4%BD%95%E5%AF%AB%E4%B8%80%E5%80%8B-git-commit-message/
參考資訊：
https://yehchitsai.gitbooks.io/linux-usage/content/use_gitlab.html
搭配 sourcetree 使用
把gitlab上的東西clone下來，file-&gt;clone，從gitlab上面複製http網址，選擇本機的資料夾</p>

<p><strong>clone</strong> :  會把整個專案的內容複製一份到你的電腦裡，這裡指的「內容」不是只有檔案，而是指所有整個專案的歷史紀錄、分支、標籤等內容都會複製一份下來。
<strong>pull</strong>： Pull 指令其實就是去上線抓東西下來（Fetch），並且更新本機的進度（Merge）而已，下載特定進度
<strong>push</strong>：先commit之後,才可以push!
<strong>commit</strong>: 要先stage,才可以commit,commit裡面要寫版號與修改的相關事項</p>

<h3 id="指令"><strong>指令：</strong></h3>
<p>1.初始設定-在目標目錄底下
<code class="language-plaintext highlighter-rouge">git init</code>
2.把遠端上的project clone 下來
<code class="language-plaintext highlighter-rouge">git clone http://...</code>
3.查看git目錄的相關資訊
<code class="language-plaintext highlighter-rouge">git status</code>
4.把檔案交給git-暫存區 (stash)
<code class="language-plaintext highlighter-rouge">git add xxx(檔案名稱</code>
5.提交到倉庫(commit) - 要輸入相關資訊,這次修改了什麼
<code class="language-plaintext highlighter-rouge">git commit -m "xxxxx"</code>
6.同時加到stash跟commit(合併步驟4、5)
<code class="language-plaintext highlighter-rouge">git commit -a -m "xxxxxx</code>
7.查看git log 狀態
<code class="language-plaintext highlighter-rouge">git log --oneline</code>
8.HEAD是一個tab,在sourcetree上面就是那個小空心圓,通常會指著目前所在branch的位置
9.merge,當branch 寫的差不多時,回到master,再 <code class="language-plaintext highlighter-rouge">git merge branch</code>
10.另外一種合併方式-&gt;rebase
(重新定義分支的參考基準!,看是要以誰為準!)
11.git stash (在commit之前,把修改先存起來)
git stash 可以放很多份,放多份之後可以再用
<code class="language-plaintext highlighter-rouge">git stash list</code> 查看
並用 <code class="language-plaintext highlighter-rouge">git stashh pop stash@{2}</code> 撿回來
12.設定upstream(上游),意旨local與remote的連結
<code class="language-plaintext highlighter-rouge">git push -u origin master</code>
或是每一次都指定要push到的remote branch</p>
<ol>
  <li>pull下載更新</li>
  <li>git pull = git fetch + git merge</li>
  <li>git pull –rebase (不會產生多個commit)
-&gt; 如果線上的版本比我的還新時,可以先pull –rebase,再進行push!
16.</li>
</ol>

<p>使用sub_branch,在sub_branch裡面做好stage-&gt;commit之後，然後切換回master_branch,再進行merge!</p>
<ol>
  <li>切換branch,切換到master
<code class="language-plaintext highlighter-rouge">git branch checkout master</code></li>
  <li>branch 要做 merge
<code class="language-plaintext highlighter-rouge">git branch sub_branch</code></li>
  <li>merge回去之後,再做push,就會更新master裡面的code了</li>
  <li><strong>整體流程run一次，當你更版好code之後</strong>
放入 stage
<code class="language-plaintext highlighter-rouge">git add xxxx.py</code>
進行 commit
<code class="language-plaintext highlighter-rouge">git commit -m xxxx.py</code>
切換 branch 至 master,再從master進行merge!!
<code class="language-plaintext highlighter-rouge">git branch checkout master</code>
<code class="language-plaintext highlighter-rouge">git branch sub_branch</code></li>
</ol>

<p>1.將gitlab上面的專案clone下來
<code class="language-plaintext highlighter-rouge">git clone 網址</code>
2.在local端新增branch   (刪除 : <code class="language-plaintext highlighter-rouge">git branch -d branch_name</code>)
<code class="language-plaintext highlighter-rouge">git branch branch_name</code>
3.切換branch
<code class="language-plaintext highlighter-rouge">git checkout branch_name</code>
4.查看branch
<code class="language-plaintext highlighter-rouge">git branch</code>
5.要上板前,先commit
<code class="language-plaintext highlighter-rouge">git commit -m "your commit"</code>
6.commit之後,可以push
<code class="language-plaintext highlighter-rouge">git push</code>
7.將 remote 上的 branch pull 下來到自己的master
<code class="language-plaintext highlighter-rouge">git checkout master</code>
<code class="language-plaintext highlighter-rouge">git pull origin branch:master</code>
8.再把自己的master push 到 remote 的 master</p>

<h3 id="特殊情境">特殊情境</h3>
<p>1.檢視目前的使用者資訊設定
<code class="language-plaintext highlighter-rouge">git config --list</code></p>

<p>fork
pull</p>

:ET