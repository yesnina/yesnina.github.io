I"Ú,<h2 id="installation">Installation</h2>

<p><a href="https://github.com/cotes2020/jekyll-theme-chirpy/fork">Fork <strong>Chirpy</strong></a> on GitHub, and clone the fork to local by:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>git clone git@github.com:&lt;username&gt;/jekyll-theme-chirpy <span class="nt">-b</span> master <span class="nt">--single-branch</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<h3 id="setting-up-the-local-envrionment">Setting up the local envrionment</h3>

<p>If you would like to run or build the project on your local machine, please follow the <a href="https://jekyllrb.com/docs/installation/">Jekyll Docs</a> to complete the installation of <code class="language-plaintext highlighter-rouge">Ruby</code>, <code class="language-plaintext highlighter-rouge">RubyGems</code> and <code class="language-plaintext highlighter-rouge">Bundler</code>.</p>

<p>Before running or building for the first time, please complete the installation of the Jekyll plugins. Go to the root directory of project and run:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>bundle <span class="nb">install</span>
</pre></td></tr></tbody></table></code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">bundle</code> will automatically install all the dependencies specified by <code class="language-plaintext highlighter-rouge">Gemfile</code>.</p>

<p>Whatâ€™s more, in order to generate some extra files (<em>categories</em>, <em>tags</em> and <em>last modified list</em>), we need to use some tool scripts. If your machine is running Debian or macOS, make sure that <a href="https://www.gnu.org/software/coreutils/">GNU coreutils</a> is installed. Otherwise, install by:</p>

<ul>
  <li>
    <p>Debian</p>

    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>coreutils
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
  <li>
    <p>macOS</p>

    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>brew <span class="nb">install </span>coreutils
</pre></td></tr></tbody></table></code></pre></div>    </div>
  </li>
</ul>

<h2 id="usage">Usage</h2>

<p>Running <a href="https://github.com/cotes2020/jekyll-theme-chirpy/"><strong>Chirpy</strong></a> requires some extra files, which cannot be generated by Jekyll native commands, so please strictly follow the methods mentioned below to run or deploy your website.</p>

<h3 id="initialization">Initialization</h3>

<p>Go to the root directory of the project and start initialization:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>bash tools/init.sh
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>If you not intend to deploy it on GitHub Pages, append parameter option <code class="language-plaintext highlighter-rouge">--no-gh</code> at the end of the above command.</p>
</blockquote>

<p>What it does is:</p>

<ol>
  <li>
    <p>Remove some files or directories from your repository:</p>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">.travis.yml</code></li>
      <li>files under <code class="language-plaintext highlighter-rouge">_posts</code></li>
      <li>folder <code class="language-plaintext highlighter-rouge">docs</code></li>
    </ul>
  </li>
  <li>
    <p>If you use the <code class="language-plaintext highlighter-rouge">--no-gh</code> option, the directory <code class="language-plaintext highlighter-rouge">.github</code> will be deleted. Otherwise, setup the GitHub Action workflow by removing extension <code class="language-plaintext highlighter-rouge">.hook</code> of <code class="language-plaintext highlighter-rouge">.github/workflows/pages-deploy.yml.hook</code>, and then remove the other files and directories in folder <code class="language-plaintext highlighter-rouge">.github</code>.</p>
  </li>
  <li>
    <p>Automatically create a commit to save the changes.</p>
  </li>
</ol>

<h3 id="configuration">Configuration</h3>

<p>Generally, go to <code class="language-plaintext highlighter-rouge">_config.yml</code> and configure the variables as needed. Some of them are typical options:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">url</code></li>
  <li><code class="language-plaintext highlighter-rouge">avatar</code></li>
  <li><code class="language-plaintext highlighter-rouge">timezone</code></li>
  <li><code class="language-plaintext highlighter-rouge">theme_mode</code></li>
</ul>

<h3 id="run-locally">Run Locally</h3>

<p>You may want to preview the site contents before publishing, so just run it by:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>bash tools/run.sh
</pre></td></tr></tbody></table></code></pre></div></div>

<p>Then open a browser and visit to <a href="http://localhost:4000">http://localhost:4000</a>.</p>

<p>Few days later, you may find that the file changes does not refresh in real time by using <code class="language-plaintext highlighter-rouge">run.sh</code>. Donâ€™t worry, the advanced option <code class="language-plaintext highlighter-rouge">-r</code> (or <code class="language-plaintext highlighter-rouge">--realtime</code>) will solve this problem, but it requires <a href="http://emcrisostomo.github.io/fswatch/"><strong>fswatch</strong></a> to be installed on your machine.</p>

<h3 id="deployment">Deployment</h3>

<p>Before the deployment begins, checkout the file <code class="language-plaintext highlighter-rouge">_config.yml</code> and make sure the <code class="language-plaintext highlighter-rouge">url</code> is configured correctly. Furthermore, if you prefer the <a href="https://help.github.com/en/github/working-with-github-pages/about-github-pages#types-of-github-pages-sites"><em>project site</em></a> and donâ€™t use a custom domain, or you want to visit your website with a base url on a web server other than <strong>GitHub Pages</strong>, remember to change the <code class="language-plaintext highlighter-rouge">baseurl</code> to your project name that starting with a slash. For example, <code class="language-plaintext highlighter-rouge">/project</code>.</p>

<p>Assuming you have already gone through the <a href="#initialization">initialization</a>, you can now choose any of the following methods to deploy your website.</p>

<h4 id="deploy-on-github-pages">Deploy on GitHub Pages</h4>

<p>For security reasons, GitHub Pages build runs on <code class="language-plaintext highlighter-rouge">safe</code> mode, which restricts us from using tool scripts to generate additional page files. Therefore, we can use GitHub Actions to build the site, store the built site files on a new branch, and use that branch as the source of the Pages service.</p>

<ol>
  <li>Push any commit to <code class="language-plaintext highlighter-rouge">origin/master</code> to trigger the GitHub Actions workflow. Once the build is complete, a new remote branch called <code class="language-plaintext highlighter-rouge">gh-pages</code> will appear, which is used to store the built site files.</li>
  <li>Unless you prefer to project sites, rename your repository to <code class="language-plaintext highlighter-rouge">&lt;username&gt;.github.io</code> on GitHub.</li>
  <li>Choose branch <code class="language-plaintext highlighter-rouge">gh-pages</code> as the <a href="https://docs.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">publishing source</a> for your GitHub Pages site.</li>
  <li>Visit your website at the address indicated by GitHub.</li>
</ol>

<h4 id="deploy-on-other-platforms">Deploy on Other Platforms</h4>

<p>On platforms other than GitHub, e.g. GitLab, we cannot enjoy the convenience of <strong>GitHub Actions</strong>. However, we have a tool to make up for this shortcoming.</p>

<p>Commit the changes of your repository first, then run the publish script:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>bash tools/publish.sh
</pre></td></tr></tbody></table></code></pre></div></div>

<blockquote>
  <p>Please note that the <em>Recent Update</em> list requires the latest git-log date of posts, thus make sure the changes in <code class="language-plaintext highlighter-rouge">_posts</code> have been committed before running this command.</p>
</blockquote>

<p>It will automatically generates the <em>Latest Modified Date</em> and <em>Categories / Tags</em> page for the posts and submit a commit, then push to <code class="language-plaintext highlighter-rouge">origin/master</code>. Its output is similar to the following log:</p>

<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="rouge-code"><pre><span class="go">[INFO] Success to update lastmod for 4 post(s).
[INFO] Succeed! 3 category-pages created.
[INFO] Succeed! 4 tag-pages created.
[INFO] Published successfully!
</span></pre></td></tr></tbody></table></code></pre></div></div>

<p>Lastly, enable the pages service according to the instructions of the platform you choose.</p>

<h4 id="deploy-on-private-server">Deploy on Private Server</h4>

<p>In the root of the source project, build your site by:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><table class="rouge-table"><tbody><tr><td class="rouge-gutter gl"><pre class="lineno">1
</pre></td><td class="rouge-code"><pre><span class="gp">$</span><span class="w"> </span>bash tools/build.sh <span class="nt">-d</span> /path/to/site/
</pre></td></tr></tbody></table></code></pre></div></div>

<p>The generated site files will be placed in the root of <code class="language-plaintext highlighter-rouge">/path/to/site/</code>. Now you should upload those files to your web server, such as Nginx.</p>
:ET